{"version":3,"file":"index.js","sources":["../node_modules/diff/lib/diff/base.js","../node_modules/diff/lib/diff/character.js","../node_modules/diff/lib/util/params.js","../node_modules/diff/lib/diff/word.js","../node_modules/diff/lib/diff/line.js","../node_modules/diff/lib/diff/sentence.js","../node_modules/diff/lib/diff/css.js","../node_modules/diff/lib/diff/json.js","../node_modules/diff/lib/patch/parse.js","../node_modules/diff/lib/util/distance-iterator.js","../node_modules/diff/lib/patch/apply.js","../node_modules/diff/lib/patch/create.js","../node_modules/diff/lib/convert/dmp.js","../node_modules/diff/lib/convert/xml.js","../node_modules/diff/lib/index.js","../hunk.js","../unidiff.js"],"sourcesContent":["/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports.default = /*istanbul ignore end*/Diff;\nfunction Diff() {}\n\nDiff.prototype = { /*istanbul ignore start*/\n  /*istanbul ignore end*/diff: function diff(oldString, newString) {\n    /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var callback = options.callback;\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    this.options = options;\n\n    var self = this;\n\n    function done(value) {\n      if (callback) {\n        setTimeout(function () {\n          callback(undefined, value);\n        }, 0);\n        return true;\n      } else {\n        return value;\n      }\n    }\n\n    // Allow subclasses to massage the input prior to running\n    oldString = this.castInput(oldString);\n    newString = this.castInput(newString);\n\n    oldString = this.removeEmpty(this.tokenize(oldString));\n    newString = this.removeEmpty(this.tokenize(newString));\n\n    var newLen = newString.length,\n        oldLen = oldString.length;\n    var editLength = 1;\n    var maxEditLength = newLen + oldLen;\n    var bestPath = [{ newPos: -1, components: [] }];\n\n    // Seed editLength = 0, i.e. the content starts with the same values\n    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n      // Identity per the equality and tokenizer\n      return done([{ value: newString.join(''), count: newString.length }]);\n    }\n\n    // Main worker method. checks all permutations of a given edit length for acceptance.\n    function execEditLength() {\n      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n        var basePath = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n        var addPath = bestPath[diagonalPath - 1],\n            removePath = bestPath[diagonalPath + 1],\n            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n        if (addPath) {\n          // No one else is going to attempt to use this value, clear it\n          bestPath[diagonalPath - 1] = undefined;\n        }\n\n        var canAdd = addPath && addPath.newPos + 1 < newLen,\n            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\n        if (!canAdd && !canRemove) {\n          // If this path is a terminal then prune\n          bestPath[diagonalPath] = undefined;\n          continue;\n        }\n\n        // Select the diagonal that we want to branch from. We select the prior\n        // path whose position in the new string is the farthest from the origin\n        // and does not pass the bounds of the diff graph\n        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n          basePath = clonePath(removePath);\n          self.pushComponent(basePath.components, undefined, true);\n        } else {\n          basePath = addPath; // No need to clone, we've pulled it from the list\n          basePath.newPos++;\n          self.pushComponent(basePath.components, true, undefined);\n        }\n\n        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n\n        // If we have hit the end of both strings, then we are done\n        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\n          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n        } else {\n          // Otherwise track this path as a potential candidate and continue.\n          bestPath[diagonalPath] = basePath;\n        }\n      }\n\n      editLength++;\n    }\n\n    // Performs the length of edit iteration. Is a bit fugly as this has to support the\n    // sync and async mode which is never fun. Loops over execEditLength until a value\n    // is produced.\n    if (callback) {\n      (function exec() {\n        setTimeout(function () {\n          // This should not happen, but we want to be safe.\n          /* istanbul ignore next */\n          if (editLength > maxEditLength) {\n            return callback();\n          }\n\n          if (!execEditLength()) {\n            exec();\n          }\n        }, 0);\n      })();\n    } else {\n      while (editLength <= maxEditLength) {\n        var ret = execEditLength();\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n  },\n  /*istanbul ignore start*/ /*istanbul ignore end*/pushComponent: function pushComponent(components, added, removed) {\n    var last = components[components.length - 1];\n    if (last && last.added === added && last.removed === removed) {\n      // We need to clone here as the component clone operation is just\n      // as shallow array clone\n      components[components.length - 1] = { count: last.count + 1, added: added, removed: removed };\n    } else {\n      components.push({ count: 1, added: added, removed: removed });\n    }\n  },\n  /*istanbul ignore start*/ /*istanbul ignore end*/extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n    var newLen = newString.length,\n        oldLen = oldString.length,\n        newPos = basePath.newPos,\n        oldPos = newPos - diagonalPath,\n        commonCount = 0;\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n      newPos++;\n      oldPos++;\n      commonCount++;\n    }\n\n    if (commonCount) {\n      basePath.components.push({ count: commonCount });\n    }\n\n    basePath.newPos = newPos;\n    return oldPos;\n  },\n  /*istanbul ignore start*/ /*istanbul ignore end*/equals: function equals(left, right) {\n    return left === right;\n  },\n  /*istanbul ignore start*/ /*istanbul ignore end*/removeEmpty: function removeEmpty(array) {\n    var ret = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n    return ret;\n  },\n  /*istanbul ignore start*/ /*istanbul ignore end*/castInput: function castInput(value) {\n    return value;\n  },\n  /*istanbul ignore start*/ /*istanbul ignore end*/tokenize: function tokenize(value) {\n    return value.split('');\n  }\n};\n\nfunction buildValues(diff, components, newString, oldString, useLongestToken) {\n  var componentPos = 0,\n      componentLen = components.length,\n      newPos = 0,\n      oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n    if (!component.removed) {\n      if (!component.added && useLongestToken) {\n        var value = newString.slice(newPos, newPos + component.count);\n        value = value.map(function (value, i) {\n          var oldValue = oldString[oldPos + i];\n          return oldValue.length > value.length ? oldValue : value;\n        });\n\n        component.value = value.join('');\n      } else {\n        component.value = newString.slice(newPos, newPos + component.count).join('');\n      }\n      newPos += component.count;\n\n      // Common case\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      component.value = oldString.slice(oldPos, oldPos + component.count).join('');\n      oldPos += component.count;\n\n      // Reverse add and remove so removes are output first to match common convention\n      // The diffing algorithm is tied to add then remove output and this is the simplest\n      // route to get the desired output with minimal overhead.\n      if (componentPos && components[componentPos - 1].added) {\n        var tmp = components[componentPos - 1];\n        components[componentPos - 1] = components[componentPos];\n        components[componentPos] = tmp;\n      }\n    }\n  }\n\n  // Special case handle for when one terminal is ignored. For this case we merge the\n  // terminal into the prior string and drop the change.\n  var lastComponent = components[componentLen - 1];\n  if (componentLen > 1 && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\n    components[componentLen - 2].value += lastComponent.value;\n    components.pop();\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return { newPos: path.newPos, components: path.components.slice(0) };\n}\n//# sourceMappingURL=data:application/json;base64,\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports.characterDiff = undefined;\nexports. /*istanbul ignore end*/diffChars = diffChars;\n\nvar /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*istanbul ignore end*/var characterDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/characterDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;\nfunction diffChars(oldStr, newStr, callback) {\n  return characterDiff.diff(oldStr, newStr, callback);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2NoYXJhY3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O2dDQUdnQjs7QUFIaEI7Ozs7Ozs7dUJBRU8sSUFBTSx5RkFBZ0IscUVBQWhCO0FBQ04sU0FBUyxTQUFULENBQW1CLE1BQW5CLEVBQTJCLE1BQTNCLEVBQW1DLFFBQW5DLEVBQTZDO0FBQUUsU0FBTyxjQUFjLElBQWQsQ0FBbUIsTUFBbkIsRUFBMkIsTUFBM0IsRUFBbUMsUUFBbkMsQ0FBUCxDQUFGO0NBQTdDIiwiZmlsZSI6ImNoYXJhY3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWZmIGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBjb25zdCBjaGFyYWN0ZXJEaWZmID0gbmV3IERpZmYoKTtcbmV4cG9ydCBmdW5jdGlvbiBkaWZmQ2hhcnMob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7IHJldHVybiBjaGFyYWN0ZXJEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTsgfVxuIl19\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports. /*istanbul ignore end*/generateOptions = generateOptions;\nfunction generateOptions(options, defaults) {\n  if (typeof options === 'function') {\n    defaults.callback = options;\n  } else if (options) {\n    for (var name in options) {\n      /* istanbul ignore else */\n      if (options.hasOwnProperty(name)) {\n        defaults[name] = options[name];\n      }\n    }\n  }\n  return defaults;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3BhcmFtcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Z0NBQWdCO0FBQVQsU0FBUyxlQUFULENBQXlCLE9BQXpCLEVBQWtDLFFBQWxDLEVBQTRDO0FBQ2pELE1BQUksT0FBTyxPQUFQLEtBQW1CLFVBQW5CLEVBQStCO0FBQ2pDLGFBQVMsUUFBVCxHQUFvQixPQUFwQixDQURpQztHQUFuQyxNQUVPLElBQUksT0FBSixFQUFhO0FBQ2xCLFNBQUssSUFBSSxJQUFKLElBQVksT0FBakIsRUFBMEI7O0FBRXhCLFVBQUksUUFBUSxjQUFSLENBQXVCLElBQXZCLENBQUosRUFBa0M7QUFDaEMsaUJBQVMsSUFBVCxJQUFpQixRQUFRLElBQVIsQ0FBakIsQ0FEZ0M7T0FBbEM7S0FGRjtHQURLO0FBUVAsU0FBTyxRQUFQLENBWGlEO0NBQTVDIiwiZmlsZSI6InBhcmFtcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZU9wdGlvbnMob3B0aW9ucywgZGVmYXVsdHMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZGVmYXVsdHMuY2FsbGJhY2sgPSBvcHRpb25zO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMpIHtcbiAgICBmb3IgKGxldCBuYW1lIGluIG9wdGlvbnMpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBkZWZhdWx0c1tuYW1lXSA9IG9wdGlvbnNbbmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWZhdWx0cztcbn1cbiJdfQ==\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports.wordDiff = undefined;\nexports. /*istanbul ignore end*/diffWords = diffWords;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWordsWithSpace = diffWordsWithSpace;\n\nvar /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nvar _base2 = _interopRequireDefault(_base);\n\n/*istanbul ignore end*/\nvar /*istanbul ignore start*/_params = require('../util/params') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*istanbul ignore end*/\n\n// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\n\nvar reWhitespace = /\\S/;\n\nvar wordDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/wordDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;\nwordDiff.equals = function (left, right) {\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\nwordDiff.tokenize = function (value) {\n  var tokens = value.split(/(\\s+|\\b)/);\n\n  // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n  for (var i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nfunction diffWords(oldStr, newStr, callback) {\n  var options = /*istanbul ignore start*/(0, _params.generateOptions) /*istanbul ignore end*/(callback, { ignoreWhitespace: true });\n  return wordDiff.diff(oldStr, newStr, options);\n}\nfunction diffWordsWithSpace(oldStr, newStr, callback) {\n  return wordDiff.diff(oldStr, newStr, callback);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL3dvcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztnQ0ErQ2dCO3lEQUlBOztBQW5EaEI7Ozs7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBLElBQU0sb0JBQW9CLCtEQUFwQjs7QUFFTixJQUFNLGVBQWUsSUFBZjs7QUFFQyxJQUFNLCtFQUFXLHFFQUFYO0FBQ2IsU0FBUyxNQUFULEdBQWtCLFVBQVMsSUFBVCxFQUFlLEtBQWYsRUFBc0I7QUFDdEMsU0FBTyxTQUFTLEtBQVQsSUFBbUIsS0FBSyxPQUFMLENBQWEsZ0JBQWIsSUFBaUMsQ0FBQyxhQUFhLElBQWIsQ0FBa0IsSUFBbEIsQ0FBRCxJQUE0QixDQUFDLGFBQWEsSUFBYixDQUFrQixLQUFsQixDQUFELENBRGpEO0NBQXRCO0FBR2xCLFNBQVMsUUFBVCxHQUFvQixVQUFTLEtBQVQsRUFBZ0I7QUFDbEMsTUFBSSxTQUFTLE1BQU0sS0FBTixDQUFZLFVBQVosQ0FBVDs7O0FBRDhCLE9BSTdCLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxPQUFPLE1BQVAsR0FBZ0IsQ0FBaEIsRUFBbUIsR0FBdkMsRUFBNEM7O0FBRTFDLFFBQUksQ0FBQyxPQUFPLElBQUksQ0FBSixDQUFSLElBQWtCLE9BQU8sSUFBSSxDQUFKLENBQXpCLElBQ0ssa0JBQWtCLElBQWxCLENBQXVCLE9BQU8sQ0FBUCxDQUF2QixDQURMLElBRUssa0JBQWtCLElBQWxCLENBQXVCLE9BQU8sSUFBSSxDQUFKLENBQTlCLENBRkwsRUFFNEM7QUFDOUMsYUFBTyxDQUFQLEtBQWEsT0FBTyxJQUFJLENBQUosQ0FBcEIsQ0FEOEM7QUFFOUMsYUFBTyxNQUFQLENBQWMsSUFBSSxDQUFKLEVBQU8sQ0FBckIsRUFGOEM7QUFHOUMsVUFIOEM7S0FGaEQ7R0FGRjs7QUFXQSxTQUFPLE1BQVAsQ0Fma0M7Q0FBaEI7O0FBa0JiLFNBQVMsU0FBVCxDQUFtQixNQUFuQixFQUEyQixNQUEzQixFQUFtQyxRQUFuQyxFQUE2QztBQUNsRCxNQUFJLFVBQVUsOEVBQWdCLFFBQWhCLEVBQTBCLEVBQUMsa0JBQWtCLElBQWxCLEVBQTNCLENBQVYsQ0FEOEM7QUFFbEQsU0FBTyxTQUFTLElBQVQsQ0FBYyxNQUFkLEVBQXNCLE1BQXRCLEVBQThCLE9BQTlCLENBQVAsQ0FGa0Q7Q0FBN0M7QUFJQSxTQUFTLGtCQUFULENBQTRCLE1BQTVCLEVBQW9DLE1BQXBDLEVBQTRDLFFBQTVDLEVBQXNEO0FBQzNELFNBQU8sU0FBUyxJQUFULENBQWMsTUFBZCxFQUFzQixNQUF0QixFQUE4QixRQUE5QixDQUFQLENBRDJEO0NBQXREIiwiZmlsZSI6IndvcmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlmZiBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHtnZW5lcmF0ZU9wdGlvbnN9IGZyb20gJy4uL3V0aWwvcGFyYW1zJztcblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fc2NyaXB0X2luX1VuaWNvZGVcbi8vXG4vLyBSYW5nZXMgYW5kIGV4Y2VwdGlvbnM6XG4vLyBMYXRpbi0xIFN1cHBsZW1lbnQsIDAwODDigJMwMEZGXG4vLyAgLSBVKzAwRDcgIMOXIE11bHRpcGxpY2F0aW9uIHNpZ25cbi8vICAtIFUrMDBGNyAgw7cgRGl2aXNpb24gc2lnblxuLy8gTGF0aW4gRXh0ZW5kZWQtQSwgMDEwMOKAkzAxN0Zcbi8vIExhdGluIEV4dGVuZGVkLUIsIDAxODDigJMwMjRGXG4vLyBJUEEgRXh0ZW5zaW9ucywgMDI1MOKAkzAyQUZcbi8vIFNwYWNpbmcgTW9kaWZpZXIgTGV0dGVycywgMDJCMOKAkzAyRkZcbi8vICAtIFUrMDJDNyAgy4cgJiM3MTE7ICBDYXJvblxuLy8gIC0gVSswMkQ4ICDLmCAmIzcyODsgIEJyZXZlXG4vLyAgLSBVKzAyRDkgIMuZICYjNzI5OyAgRG90IEFib3ZlXG4vLyAgLSBVKzAyREEgIMuaICYjNzMwOyAgUmluZyBBYm92ZVxuLy8gIC0gVSswMkRCICDLmyAmIzczMTsgIE9nb25la1xuLy8gIC0gVSswMkRDICDLnCAmIzczMjsgIFNtYWxsIFRpbGRlXG4vLyAgLSBVKzAyREQgIMudICYjNzMzOyAgRG91YmxlIEFjdXRlIEFjY2VudFxuLy8gTGF0aW4gRXh0ZW5kZWQgQWRkaXRpb25hbCwgMUUwMOKAkzFFRkZcbmNvbnN0IGV4dGVuZGVkV29yZENoYXJzID0gL15bYS16QS1aXFx1e0MwfS1cXHV7RkZ9XFx1e0Q4fS1cXHV7RjZ9XFx1e0Y4fS1cXHV7MkM2fVxcdXsyQzh9LVxcdXsyRDd9XFx1ezJERX0tXFx1ezJGRn1cXHV7MUUwMH0tXFx1ezFFRkZ9XSskL3U7XG5cbmNvbnN0IHJlV2hpdGVzcGFjZSA9IC9cXFMvO1xuXG5leHBvcnQgY29uc3Qgd29yZERpZmYgPSBuZXcgRGlmZigpO1xud29yZERpZmYuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8ICh0aGlzLm9wdGlvbnMuaWdub3JlV2hpdGVzcGFjZSAmJiAhcmVXaGl0ZXNwYWNlLnRlc3QobGVmdCkgJiYgIXJlV2hpdGVzcGFjZS50ZXN0KHJpZ2h0KSk7XG59O1xud29yZERpZmYudG9rZW5pemUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICBsZXQgdG9rZW5zID0gdmFsdWUuc3BsaXQoLyhcXHMrfFxcYikvKTtcblxuICAvLyBKb2luIHRoZSBib3VuZGFyeSBzcGxpdHMgdGhhdCB3ZSBkbyBub3QgY29uc2lkZXIgdG8gYmUgYm91bmRhcmllcy4gVGhpcyBpcyBwcmltYXJpbHkgdGhlIGV4dGVuZGVkIExhdGluIGNoYXJhY3RlciBzZXQuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIC8vIElmIHdlIGhhdmUgYW4gZW1wdHkgc3RyaW5nIGluIHRoZSBuZXh0IGZpZWxkIGFuZCB3ZSBoYXZlIG9ubHkgd29yZCBjaGFycyBiZWZvcmUgYW5kIGFmdGVyLCBtZXJnZVxuICAgIGlmICghdG9rZW5zW2kgKyAxXSAmJiB0b2tlbnNbaSArIDJdXG4gICAgICAgICAgJiYgZXh0ZW5kZWRXb3JkQ2hhcnMudGVzdCh0b2tlbnNbaV0pXG4gICAgICAgICAgJiYgZXh0ZW5kZWRXb3JkQ2hhcnMudGVzdCh0b2tlbnNbaSArIDJdKSkge1xuICAgICAgdG9rZW5zW2ldICs9IHRva2Vuc1tpICsgMl07XG4gICAgICB0b2tlbnMuc3BsaWNlKGkgKyAxLCAyKTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZXb3JkcyhvbGRTdHIsIG5ld1N0ciwgY2FsbGJhY2spIHtcbiAgbGV0IG9wdGlvbnMgPSBnZW5lcmF0ZU9wdGlvbnMoY2FsbGJhY2ssIHtpZ25vcmVXaGl0ZXNwYWNlOiB0cnVlfSk7XG4gIHJldHVybiB3b3JkRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmV29yZHNXaXRoU3BhY2Uob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB3b3JkRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjayk7XG59XG4iXX0=\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports.lineDiff = undefined;\nexports. /*istanbul ignore end*/diffLines = diffLines;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffTrimmedLines = diffTrimmedLines;\n\nvar /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nvar _base2 = _interopRequireDefault(_base);\n\n/*istanbul ignore end*/\nvar /*istanbul ignore start*/_params = require('../util/params') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*istanbul ignore end*/var lineDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/lineDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;\nlineDiff.tokenize = function (value) {\n  var retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n  // Ignore the final empty token that occurs if the string ends with a new line\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  }\n\n  // Merge the content and line separators into single tokens\n  for (var i = 0; i < linesAndNewlines.length; i++) {\n    var line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nfunction diffLines(oldStr, newStr, callback) {\n  return lineDiff.diff(oldStr, newStr, callback);\n}\nfunction diffTrimmedLines(oldStr, newStr, callback) {\n  var options = /*istanbul ignore start*/(0, _params.generateOptions) /*istanbul ignore end*/(callback, { ignoreWhitespace: true });\n  return lineDiff.diff(oldStr, newStr, options);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2xpbmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztnQ0E4QmdCO3lEQUNBOztBQS9CaEI7Ozs7OztBQUNBOzs7Ozt1QkFFTyxJQUFNLCtFQUFXLHFFQUFYO0FBQ2IsU0FBUyxRQUFULEdBQW9CLFVBQVMsS0FBVCxFQUFnQjtBQUNsQyxNQUFJLFdBQVcsRUFBWDtNQUNBLG1CQUFtQixNQUFNLEtBQU4sQ0FBWSxXQUFaLENBQW5COzs7QUFGOEIsTUFLOUIsQ0FBQyxpQkFBaUIsaUJBQWlCLE1BQWpCLEdBQTBCLENBQTFCLENBQWxCLEVBQWdEO0FBQ2xELHFCQUFpQixHQUFqQixHQURrRDtHQUFwRDs7O0FBTGtDLE9BVTdCLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxpQkFBaUIsTUFBakIsRUFBeUIsR0FBN0MsRUFBa0Q7QUFDaEQsUUFBSSxPQUFPLGlCQUFpQixDQUFqQixDQUFQLENBRDRDOztBQUdoRCxRQUFJLElBQUksQ0FBSixJQUFTLENBQUMsS0FBSyxPQUFMLENBQWEsY0FBYixFQUE2QjtBQUN6QyxlQUFTLFNBQVMsTUFBVCxHQUFrQixDQUFsQixDQUFULElBQWlDLElBQWpDLENBRHlDO0tBQTNDLE1BRU87QUFDTCxVQUFJLEtBQUssT0FBTCxDQUFhLGdCQUFiLEVBQStCO0FBQ2pDLGVBQU8sS0FBSyxJQUFMLEVBQVAsQ0FEaUM7T0FBbkM7QUFHQSxlQUFTLElBQVQsQ0FBYyxJQUFkLEVBSks7S0FGUDtHQUhGOztBQWFBLFNBQU8sUUFBUCxDQXZCa0M7Q0FBaEI7O0FBMEJiLFNBQVMsU0FBVCxDQUFtQixNQUFuQixFQUEyQixNQUEzQixFQUFtQyxRQUFuQyxFQUE2QztBQUFFLFNBQU8sU0FBUyxJQUFULENBQWMsTUFBZCxFQUFzQixNQUF0QixFQUE4QixRQUE5QixDQUFQLENBQUY7Q0FBN0M7QUFDQSxTQUFTLGdCQUFULENBQTBCLE1BQTFCLEVBQWtDLE1BQWxDLEVBQTBDLFFBQTFDLEVBQW9EO0FBQ3pELE1BQUksVUFBVSw4RUFBZ0IsUUFBaEIsRUFBMEIsRUFBQyxrQkFBa0IsSUFBbEIsRUFBM0IsQ0FBVixDQURxRDtBQUV6RCxTQUFPLFNBQVMsSUFBVCxDQUFjLE1BQWQsRUFBc0IsTUFBdEIsRUFBOEIsT0FBOUIsQ0FBUCxDQUZ5RDtDQUFwRCIsImZpbGUiOiJsaW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7Z2VuZXJhdGVPcHRpb25zfSBmcm9tICcuLi91dGlsL3BhcmFtcyc7XG5cbmV4cG9ydCBjb25zdCBsaW5lRGlmZiA9IG5ldyBEaWZmKCk7XG5saW5lRGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGxldCByZXRMaW5lcyA9IFtdLFxuICAgICAgbGluZXNBbmROZXdsaW5lcyA9IHZhbHVlLnNwbGl0KC8oXFxufFxcclxcbikvKTtcblxuICAvLyBJZ25vcmUgdGhlIGZpbmFsIGVtcHR5IHRva2VuIHRoYXQgb2NjdXJzIGlmIHRoZSBzdHJpbmcgZW5kcyB3aXRoIGEgbmV3IGxpbmVcbiAgaWYgKCFsaW5lc0FuZE5ld2xpbmVzW2xpbmVzQW5kTmV3bGluZXMubGVuZ3RoIC0gMV0pIHtcbiAgICBsaW5lc0FuZE5ld2xpbmVzLnBvcCgpO1xuICB9XG5cbiAgLy8gTWVyZ2UgdGhlIGNvbnRlbnQgYW5kIGxpbmUgc2VwYXJhdG9ycyBpbnRvIHNpbmdsZSB0b2tlbnNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lc0FuZE5ld2xpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGxpbmUgPSBsaW5lc0FuZE5ld2xpbmVzW2ldO1xuXG4gICAgaWYgKGkgJSAyICYmICF0aGlzLm9wdGlvbnMubmV3bGluZUlzVG9rZW4pIHtcbiAgICAgIHJldExpbmVzW3JldExpbmVzLmxlbmd0aCAtIDFdICs9IGxpbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlV2hpdGVzcGFjZSkge1xuICAgICAgICBsaW5lID0gbGluZS50cmltKCk7XG4gICAgICB9XG4gICAgICByZXRMaW5lcy5wdXNoKGxpbmUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXRMaW5lcztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmTGluZXMob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7IHJldHVybiBsaW5lRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjayk7IH1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmVHJpbW1lZExpbmVzKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykge1xuICBsZXQgb3B0aW9ucyA9IGdlbmVyYXRlT3B0aW9ucyhjYWxsYmFjaywge2lnbm9yZVdoaXRlc3BhY2U6IHRydWV9KTtcbiAgcmV0dXJuIGxpbmVEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIG9wdGlvbnMpO1xufVxuIl19\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports.sentenceDiff = undefined;\nexports. /*istanbul ignore end*/diffSentences = diffSentences;\n\nvar /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*istanbul ignore end*/var sentenceDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/sentenceDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;\nsentenceDiff.tokenize = function (value) {\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\n\nfunction diffSentences(oldStr, newStr, callback) {\n  return sentenceDiff.diff(oldStr, newStr, callback);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL3NlbnRlbmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Z0NBUWdCOztBQVJoQjs7Ozs7Ozt1QkFHTyxJQUFNLHVGQUFlLHFFQUFmO0FBQ2IsYUFBYSxRQUFiLEdBQXdCLFVBQVMsS0FBVCxFQUFnQjtBQUN0QyxTQUFPLE1BQU0sS0FBTixDQUFZLHVCQUFaLENBQVAsQ0FEc0M7Q0FBaEI7O0FBSWpCLFNBQVMsYUFBVCxDQUF1QixNQUF2QixFQUErQixNQUEvQixFQUF1QyxRQUF2QyxFQUFpRDtBQUFFLFNBQU8sYUFBYSxJQUFiLENBQWtCLE1BQWxCLEVBQTBCLE1BQTFCLEVBQWtDLFFBQWxDLENBQVAsQ0FBRjtDQUFqRCIsImZpbGUiOiJzZW50ZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWZmIGZyb20gJy4vYmFzZSc7XG5cblxuZXhwb3J0IGNvbnN0IHNlbnRlbmNlRGlmZiA9IG5ldyBEaWZmKCk7XG5zZW50ZW5jZURpZmYudG9rZW5pemUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuc3BsaXQoLyhcXFMuKz9bLiE/XSkoPz1cXHMrfCQpLyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGlmZlNlbnRlbmNlcyhvbGRTdHIsIG5ld1N0ciwgY2FsbGJhY2spIHsgcmV0dXJuIHNlbnRlbmNlRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjayk7IH1cbiJdfQ==\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports.cssDiff = undefined;\nexports. /*istanbul ignore end*/diffCss = diffCss;\n\nvar /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*istanbul ignore end*/var cssDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/cssDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;\ncssDiff.tokenize = function (value) {\n  return value.split(/([{}:;,]|\\s+)/);\n};\n\nfunction diffCss(oldStr, newStr, callback) {\n  return cssDiff.diff(oldStr, newStr, callback);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2Nzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O2dDQU9nQjs7QUFQaEI7Ozs7Ozs7dUJBRU8sSUFBTSw2RUFBVSxxRUFBVjtBQUNiLFFBQVEsUUFBUixHQUFtQixVQUFTLEtBQVQsRUFBZ0I7QUFDakMsU0FBTyxNQUFNLEtBQU4sQ0FBWSxlQUFaLENBQVAsQ0FEaUM7Q0FBaEI7O0FBSVosU0FBUyxPQUFULENBQWlCLE1BQWpCLEVBQXlCLE1BQXpCLEVBQWlDLFFBQWpDLEVBQTJDO0FBQUUsU0FBTyxRQUFRLElBQVIsQ0FBYSxNQUFiLEVBQXFCLE1BQXJCLEVBQTZCLFFBQTdCLENBQVAsQ0FBRjtDQUEzQyIsImZpbGUiOiJjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlmZiBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgY29uc3QgY3NzRGlmZiA9IG5ldyBEaWZmKCk7XG5jc3NEaWZmLnRva2VuaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnNwbGl0KC8oW3t9OjssXXxcXHMrKS8pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZDc3Mob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7IHJldHVybiBjc3NEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTsgfVxuIl19\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports.jsonDiff = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nexports. /*istanbul ignore end*/diffJson = diffJson;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/canonicalize = canonicalize;\n\nvar /*istanbul ignore start*/_base = require('./base') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nvar _base2 = _interopRequireDefault(_base);\n\n/*istanbul ignore end*/\nvar /*istanbul ignore start*/_line = require('./line') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*istanbul ignore end*/\n\nvar objectPrototypeToString = Object.prototype.toString;\n\nvar jsonDiff = /*istanbul ignore start*/exports. /*istanbul ignore end*/jsonDiff = new /*istanbul ignore start*/_base2.default() /*istanbul ignore end*/;\n// Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\njsonDiff.useLongestToken = true;\n\njsonDiff.tokenize = /*istanbul ignore start*/_line.lineDiff. /*istanbul ignore end*/tokenize;\njsonDiff.castInput = function (value) {\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value), undefined, '  ');\n};\njsonDiff.equals = function (left, right) {\n  return (/*istanbul ignore start*/_base2.default. /*istanbul ignore end*/prototype.equals(left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'))\n  );\n};\n\nfunction diffJson(oldObj, newObj, callback) {\n  return jsonDiff.diff(oldObj, newObj, callback);\n}\n\n// This function handles the presence of circular references by bailing out when encountering an\n// object that is already on the \"stack\" of items being processed.\nfunction canonicalize(obj, stack, replacementStack) {\n  stack = stack || [];\n  replacementStack = replacementStack || [];\n\n  var i = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\n  for (i = 0; i < stack.length; i += 1) {\n    if (stack[i] === obj) {\n      return replacementStack[i];\n    }\n  }\n\n  var canonicalizedObj = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n    stack.push(obj);\n    canonicalizedObj = new Array(obj.length);\n    replacementStack.push(canonicalizedObj);\n    for (i = 0; i < obj.length; i += 1) {\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);\n    }\n    stack.pop();\n    replacementStack.pop();\n    return canonicalizedObj;\n  }\n\n  if (obj && obj.toJSON) {\n    obj = obj.toJSON();\n  }\n\n  if ( /*istanbul ignore start*/(typeof /*istanbul ignore end*/obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    replacementStack.push(canonicalizedObj);\n    var sortedKeys = [],\n        key = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n    for (key in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(key)) {\n        sortedKeys.push(key);\n      }\n    }\n    sortedKeys.sort();\n    for (i = 0; i < sortedKeys.length; i += 1) {\n      key = sortedKeys[i];\n      canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);\n    }\n    stack.pop();\n    replacementStack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n  return canonicalizedObj;\n}\n//# sourceMappingURL=data:application/json;base64,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QjtLQUZGO0FBTUEsZUFBVyxJQUFYLEdBWjJDO0FBYTNDLFNBQUssSUFBSSxDQUFKLEVBQU8sSUFBSSxXQUFXLE1BQVgsRUFBbUIsS0FBSyxDQUFMLEVBQVE7QUFDekMsWUFBTSxXQUFXLENBQVgsQ0FBTixDQUR5QztBQUV6Qyx1QkFBaUIsR0FBakIsSUFBd0IsYUFBYSxJQUFJLEdBQUosQ0FBYixFQUF1QixLQUF2QixFQUE4QixnQkFBOUIsQ0FBeEIsQ0FGeUM7S0FBM0M7QUFJQSxVQUFNLEdBQU4sR0FqQjJDO0FBa0IzQyxxQkFBaUIsR0FBakIsR0FsQjJDO0dBQTdDLE1BbUJPO0FBQ0wsdUJBQW1CLEdBQW5CLENBREs7R0FuQlA7QUFzQkEsU0FBTyxnQkFBUCxDQXBEeUQ7Q0FBcEQiLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWZmIGZyb20gJy4vYmFzZSc7XG5pbXBvcnQge2xpbmVEaWZmfSBmcm9tICcuL2xpbmUnO1xuXG5jb25zdCBvYmplY3RQcm90b3R5cGVUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cblxuZXhwb3J0IGNvbnN0IGpzb25EaWZmID0gbmV3IERpZmYoKTtcbi8vIERpc2NyaW1pbmF0ZSBiZXR3ZWVuIHR3byBsaW5lcyBvZiBwcmV0dHktcHJpbnRlZCwgc2VyaWFsaXplZCBKU09OIHdoZXJlIG9uZSBvZiB0aGVtIGhhcyBhXG4vLyBkYW5nbGluZyBjb21tYSBhbmQgdGhlIG90aGVyIGRvZXNuJ3QuIFR1cm5zIG91dCBpbmNsdWRpbmcgdGhlIGRhbmdsaW5nIGNvbW1hIHlpZWxkcyB0aGUgbmljZXN0IG91dHB1dDpcbmpzb25EaWZmLnVzZUxvbmdlc3RUb2tlbiA9IHRydWU7XG5cbmpzb25EaWZmLnRva2VuaXplID0gbGluZURpZmYudG9rZW5pemU7XG5qc29uRGlmZi5jYXN0SW5wdXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkoY2Fub25pY2FsaXplKHZhbHVlKSwgdW5kZWZpbmVkLCAnICAnKTtcbn07XG5qc29uRGlmZi5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICByZXR1cm4gRGlmZi5wcm90b3R5cGUuZXF1YWxzKGxlZnQucmVwbGFjZSgvLChbXFxyXFxuXSkvZywgJyQxJyksIHJpZ2h0LnJlcGxhY2UoLywoW1xcclxcbl0pL2csICckMScpKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmSnNvbihvbGRPYmosIG5ld09iaiwgY2FsbGJhY2spIHsgcmV0dXJuIGpzb25EaWZmLmRpZmYob2xkT2JqLCBuZXdPYmosIGNhbGxiYWNrKTsgfVxuXG5cbi8vIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0aGUgcHJlc2VuY2Ugb2YgY2lyY3VsYXIgcmVmZXJlbmNlcyBieSBiYWlsaW5nIG91dCB3aGVuIGVuY291bnRlcmluZyBhblxuLy8gb2JqZWN0IHRoYXQgaXMgYWxyZWFkeSBvbiB0aGUgXCJzdGFja1wiIG9mIGl0ZW1zIGJlaW5nIHByb2Nlc3NlZC5cbmV4cG9ydCBmdW5jdGlvbiBjYW5vbmljYWxpemUob2JqLCBzdGFjaywgcmVwbGFjZW1lbnRTdGFjaykge1xuICBzdGFjayA9IHN0YWNrIHx8IFtdO1xuICByZXBsYWNlbWVudFN0YWNrID0gcmVwbGFjZW1lbnRTdGFjayB8fCBbXTtcblxuICBsZXQgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoc3RhY2tbaV0gPT09IG9iaikge1xuICAgICAgcmV0dXJuIHJlcGxhY2VtZW50U3RhY2tbaV07XG4gICAgfVxuICB9XG5cbiAgbGV0IGNhbm9uaWNhbGl6ZWRPYmo7XG5cbiAgaWYgKCdbb2JqZWN0IEFycmF5XScgPT09IG9iamVjdFByb3RvdHlwZVRvU3RyaW5nLmNhbGwob2JqKSkge1xuICAgIHN0YWNrLnB1c2gob2JqKTtcbiAgICBjYW5vbmljYWxpemVkT2JqID0gbmV3IEFycmF5KG9iai5sZW5ndGgpO1xuICAgIHJlcGxhY2VtZW50U3RhY2sucHVzaChjYW5vbmljYWxpemVkT2JqKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjYW5vbmljYWxpemVkT2JqW2ldID0gY2Fub25pY2FsaXplKG9ialtpXSwgc3RhY2ssIHJlcGxhY2VtZW50U3RhY2spO1xuICAgIH1cbiAgICBzdGFjay5wb3AoKTtcbiAgICByZXBsYWNlbWVudFN0YWNrLnBvcCgpO1xuICAgIHJldHVybiBjYW5vbmljYWxpemVkT2JqO1xuICB9XG5cbiAgaWYgKG9iaiAmJiBvYmoudG9KU09OKSB7XG4gICAgb2JqID0gb2JqLnRvSlNPTigpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkge1xuICAgIHN0YWNrLnB1c2gob2JqKTtcbiAgICBjYW5vbmljYWxpemVkT2JqID0ge307XG4gICAgcmVwbGFjZW1lbnRTdGFjay5wdXNoKGNhbm9uaWNhbGl6ZWRPYmopO1xuICAgIGxldCBzb3J0ZWRLZXlzID0gW10sXG4gICAgICAgIGtleTtcbiAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgc29ydGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRlZEtleXMuc29ydCgpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzb3J0ZWRLZXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBrZXkgPSBzb3J0ZWRLZXlzW2ldO1xuICAgICAgY2Fub25pY2FsaXplZE9ialtrZXldID0gY2Fub25pY2FsaXplKG9ialtrZXldLCBzdGFjaywgcmVwbGFjZW1lbnRTdGFjayk7XG4gICAgfVxuICAgIHN0YWNrLnBvcCgpO1xuICAgIHJlcGxhY2VtZW50U3RhY2sucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgY2Fub25pY2FsaXplZE9iaiA9IG9iajtcbiAgfVxuICByZXR1cm4gY2Fub25pY2FsaXplZE9iajtcbn1cbiJdfQ==\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports. /*istanbul ignore end*/parsePatch = parsePatch;\nfunction parsePatch(uniDiff) {\n  /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  var diffstr = uniDiff.split('\\n'),\n      list = [],\n      i = 0;\n\n  function parseIndex() {\n    var index = {};\n    list.push(index);\n\n    // Parse diff metadata\n    while (i < diffstr.length) {\n      var line = diffstr[i];\n\n      // File header found, end parsing diff metadata\n      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n        break;\n      }\n\n      // Diff index\n      var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n      if (header) {\n        index.index = header[1];\n      }\n\n      i++;\n    }\n\n    // Parse file headers if they are defined. Unified diff requires them, but\n    // there's no technical issues to have an isolated hunk without file header\n    parseFileHeader(index);\n    parseFileHeader(index);\n\n    // Parse hunks\n    index.hunks = [];\n\n    while (i < diffstr.length) {\n      var _line = diffstr[i];\n\n      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n        break;\n      } else if (/^@@/.test(_line)) {\n        index.hunks.push(parseHunk());\n      } else if (_line && options.strict) {\n        // Ignore unexpected content unless in strict mode\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\n      } else {\n        i++;\n      }\n    }\n  }\n\n  // Parses the --- and +++ headers, if none are found, no lines\n  // are consumed.\n  function parseFileHeader(index) {\n    var fileHeader = /^(\\-\\-\\-|\\+\\+\\+)\\s+(\\S*)\\s?(.*?)\\s*$/.exec(diffstr[i]);\n    if (fileHeader) {\n      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n      index[keyPrefix + 'FileName'] = fileHeader[2];\n      index[keyPrefix + 'Header'] = fileHeader[3];\n\n      i++;\n    }\n  }\n\n  // Parses a hunk\n  // This assumes that we are at the start of a hunk.\n  function parseHunk() {\n    var chunkHeaderIndex = i,\n        chunkHeaderLine = diffstr[i++],\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n\n    var hunk = {\n      oldStart: +chunkHeader[1],\n      oldLines: +chunkHeader[2] || 1,\n      newStart: +chunkHeader[3],\n      newLines: +chunkHeader[4] || 1,\n      lines: []\n    };\n\n    var addCount = 0,\n        removeCount = 0;\n    for (; i < diffstr.length; i++) {\n      var operation = diffstr[i][0];\n\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n        hunk.lines.push(diffstr[i]);\n\n        if (operation === '+') {\n          addCount++;\n        } else if (operation === '-') {\n          removeCount++;\n        } else if (operation === ' ') {\n          addCount++;\n          removeCount++;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Handle the empty block count case\n    if (!addCount && hunk.newLines === 1) {\n      hunk.newLines = 0;\n    }\n    if (!removeCount && hunk.oldLines === 1) {\n      hunk.oldLines = 0;\n    }\n\n    // Perform optional sanity checking\n    if (options.strict) {\n      if (addCount !== hunk.newLines) {\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n      if (removeCount !== hunk.oldLines) {\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n    }\n\n    return hunk;\n  }\n\n  while (i < diffstr.length) {\n    parseIndex();\n  }\n\n  return list;\n}\n//# sourceMappingURL=data:application/json;base64,\n","/*istanbul ignore start*/\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = /*istanbul ignore end*/function (start, minLine, maxLine) {\n  var wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      }\n\n      // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      }\n\n      // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n      if (minLine <= start - localOffset) {\n        return - localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    }\n\n    // We tried to fit hunk before text beginning and beyond text lenght, then\n    // hunk can't fit on the text. Return undefined\n  };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2Rpc3RhbmNlLWl0ZXJhdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7eUNBR2UsVUFBUyxLQUFULEVBQWdCLE9BQWhCLEVBQXlCLE9BQXpCLEVBQWtDO0FBQy9DLE1BQUksY0FBYyxJQUFkO01BQ0Esb0JBQW9CLEtBQXBCO01BQ0EsbUJBQW1CLEtBQW5CO01BQ0EsY0FBYyxDQUFkLENBSjJDOztBQU0vQyxTQUFPLFNBQVMsUUFBVCxHQUFvQjtBQUN6QixRQUFJLGVBQWUsQ0FBQyxnQkFBRCxFQUFtQjtBQUNwQyxVQUFJLGlCQUFKLEVBQXVCO0FBQ3JCLHNCQURxQjtPQUF2QixNQUVPO0FBQ0wsc0JBQWMsS0FBZCxDQURLO09BRlA7Ozs7QUFEb0MsVUFTaEMsUUFBUSxXQUFSLElBQXVCLE9BQXZCLEVBQWdDO0FBQ2xDLGVBQU8sV0FBUCxDQURrQztPQUFwQzs7QUFJQSx5QkFBbUIsSUFBbkIsQ0Fib0M7S0FBdEM7O0FBZ0JBLFFBQUksQ0FBQyxpQkFBRCxFQUFvQjtBQUN0QixVQUFJLENBQUMsZ0JBQUQsRUFBbUI7QUFDckIsc0JBQWMsSUFBZCxDQURxQjtPQUF2Qjs7OztBQURzQixVQU9sQixXQUFXLFFBQVEsV0FBUixFQUFxQjtBQUNsQyxlQUFPLEVBQUMsYUFBRCxDQUQyQjtPQUFwQzs7QUFJQSwwQkFBb0IsSUFBcEIsQ0FYc0I7QUFZdEIsYUFBTyxVQUFQLENBWnNCO0tBQXhCOzs7O0FBakJ5QixHQUFwQixDQU53QztDQUFsQyIsImZpbGUiOiJkaXN0YW5jZS1pdGVyYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEl0ZXJhdG9yIHRoYXQgdHJhdmVyc2VzIGluIHRoZSByYW5nZSBvZiBbbWluLCBtYXhdLCBzdGVwcGluZ1xuLy8gYnkgZGlzdGFuY2UgZnJvbSBhIGdpdmVuIHN0YXJ0IHBvc2l0aW9uLiBJLmUuIGZvciBbMCwgNF0sIHdpdGhcbi8vIHN0YXJ0IG9mIDIsIHRoaXMgd2lsbCBpdGVyYXRlIDIsIDMsIDEsIDQsIDAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgbWluTGluZSwgbWF4TGluZSkge1xuICBsZXQgd2FudEZvcndhcmQgPSB0cnVlLFxuICAgICAgYmFja3dhcmRFeGhhdXN0ZWQgPSBmYWxzZSxcbiAgICAgIGZvcndhcmRFeGhhdXN0ZWQgPSBmYWxzZSxcbiAgICAgIGxvY2FsT2Zmc2V0ID0gMTtcblxuICByZXR1cm4gZnVuY3Rpb24gaXRlcmF0b3IoKSB7XG4gICAgaWYgKHdhbnRGb3J3YXJkICYmICFmb3J3YXJkRXhoYXVzdGVkKSB7XG4gICAgICBpZiAoYmFja3dhcmRFeGhhdXN0ZWQpIHtcbiAgICAgICAgbG9jYWxPZmZzZXQrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhbnRGb3J3YXJkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIHRyeWluZyB0byBmaXQgYmV5b25kIHRleHQgbGVuZ3RoLCBhbmQgaWYgbm90LCBjaGVjayBpdCBmaXRzXG4gICAgICAvLyBhZnRlciBvZmZzZXQgbG9jYXRpb24gKG9yIGRlc2lyZWQgbG9jYXRpb24gb24gZmlyc3QgaXRlcmF0aW9uKVxuICAgICAgaWYgKHN0YXJ0ICsgbG9jYWxPZmZzZXQgPD0gbWF4TGluZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGZvcndhcmRFeGhhdXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICghYmFja3dhcmRFeGhhdXN0ZWQpIHtcbiAgICAgIGlmICghZm9yd2FyZEV4aGF1c3RlZCkge1xuICAgICAgICB3YW50Rm9yd2FyZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIHRyeWluZyB0byBmaXQgYmVmb3JlIHRleHQgYmVnaW5uaW5nLCBhbmQgaWYgbm90LCBjaGVjayBpdCBmaXRzXG4gICAgICAvLyBiZWZvcmUgb2Zmc2V0IGxvY2F0aW9uXG4gICAgICBpZiAobWluTGluZSA8PSBzdGFydCAtIGxvY2FsT2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiAtbG9jYWxPZmZzZXQrKztcbiAgICAgIH1cblxuICAgICAgYmFja3dhcmRFeGhhdXN0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yKCk7XG4gICAgfVxuXG4gICAgLy8gV2UgdHJpZWQgdG8gZml0IGh1bmsgYmVmb3JlIHRleHQgYmVnaW5uaW5nIGFuZCBiZXlvbmQgdGV4dCBsZW5naHQsIHRoZW5cbiAgICAvLyBodW5rIGNhbid0IGZpdCBvbiB0aGUgdGV4dC4gUmV0dXJuIHVuZGVmaW5lZFxuICB9O1xufVxuIl19\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports. /*istanbul ignore end*/applyPatch = applyPatch;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatches = applyPatches;\n\nvar /*istanbul ignore start*/_parse = require('./parse') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_distanceIterator = require('../util/distance-iterator') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nvar _distanceIterator2 = _interopRequireDefault(_distanceIterator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*istanbul ignore end*/function applyPatch(source, uniDiff) {\n  /*istanbul ignore start*/var /*istanbul ignore end*/options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n  if (typeof uniDiff === 'string') {\n    uniDiff = /*istanbul ignore start*/(0, _parse.parsePatch) /*istanbul ignore end*/(uniDiff);\n  }\n\n  if (Array.isArray(uniDiff)) {\n    if (uniDiff.length > 1) {\n      throw new Error('applyPatch only works with a single input.');\n    }\n\n    uniDiff = uniDiff[0];\n  }\n\n  // Apply the diff to the input\n  var lines = source.split('\\n'),\n      hunks = uniDiff.hunks,\n      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) /*istanbul ignore start*/{\n    return (/*istanbul ignore end*/line === patchContent\n    );\n  },\n      errorCount = 0,\n      fuzzFactor = options.fuzzFactor || 0,\n      minLine = 0,\n      offset = 0,\n      removeEOFNL = /*istanbul ignore start*/void 0 /*istanbul ignore end*/,\n      addEOFNL = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n\n  /**\n   * Checks if the hunk exactly fits on the provided location\n   */\n  function hunkFits(hunk, toPos) {\n    for (var j = 0; j < hunk.lines.length; j++) {\n      var line = hunk.lines[j],\n          operation = line[0],\n          content = line.substr(1);\n\n      if (operation === ' ' || operation === '-') {\n        // Context sanity check\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n          errorCount++;\n\n          if (errorCount > fuzzFactor) {\n            return false;\n          }\n        }\n        toPos++;\n      }\n    }\n\n    return true;\n  }\n\n  // Search best fit offsets for each hunk based on the previous ones\n  for (var i = 0; i < hunks.length; i++) {\n    var hunk = hunks[i],\n        maxLine = lines.length - hunk.oldLines,\n        localOffset = 0,\n        toPos = offset + hunk.oldStart - 1;\n\n    var iterator = /*istanbul ignore start*/(0, _distanceIterator2.default) /*istanbul ignore end*/(toPos, minLine, maxLine);\n\n    for (; localOffset !== undefined; localOffset = iterator()) {\n      if (hunkFits(hunk, toPos + localOffset)) {\n        hunk.offset = offset += localOffset;\n        break;\n      }\n    }\n\n    if (localOffset === undefined) {\n      return false;\n    }\n\n    // Set lower text limit to end of the current hunk, so next ones don't try\n    // to fit over already patched text\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n  }\n\n  // Apply patch hunks\n  for (var _i = 0; _i < hunks.length; _i++) {\n    var _hunk = hunks[_i],\n        _toPos = _hunk.offset + _hunk.newStart - 1;\n    if (_hunk.newLines == 0) {\n      _toPos++;\n    }\n\n    for (var j = 0; j < _hunk.lines.length; j++) {\n      var line = _hunk.lines[j],\n          operation = line[0],\n          content = line.substr(1);\n\n      if (operation === ' ') {\n        _toPos++;\n      } else if (operation === '-') {\n        lines.splice(_toPos, 1);\n        /* istanbul ignore else */\n      } else if (operation === '+') {\n          lines.splice(_toPos, 0, content);\n          _toPos++;\n        } else if (operation === '\\\\') {\n          var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n          if (previousOperation === '+') {\n            removeEOFNL = true;\n          } else if (previousOperation === '-') {\n            addEOFNL = true;\n          }\n        }\n    }\n  }\n\n  // Handle EOFNL insertion/removal\n  if (removeEOFNL) {\n    while (!lines[lines.length - 1]) {\n      lines.pop();\n    }\n  } else if (addEOFNL) {\n    lines.push('');\n  }\n  return lines.join('\\n');\n}\n\n// Wrapper that supports multiple file patches via callbacks.\nfunction applyPatches(uniDiff, options) {\n  if (typeof uniDiff === 'string') {\n    uniDiff = /*istanbul ignore start*/(0, _parse.parsePatch) /*istanbul ignore end*/(uniDiff);\n  }\n\n  var currentIndex = 0;\n  function processIndex() {\n    var index = uniDiff[currentIndex++];\n    if (!index) {\n      return options.complete();\n    }\n\n    options.loadFile(index, function (err, data) {\n      if (err) {\n        return options.complete(err);\n      }\n\n      var updatedContent = applyPatch(data, index, options);\n      options.patched(index, updatedContent);\n\n      setTimeout(processIndex, 0);\n    });\n  }\n  processIndex();\n}\n//# sourceMappingURL=data:application/json;base64,\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports. /*istanbul ignore end*/structuredPatch = structuredPatch;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/createTwoFilesPatch = createTwoFilesPatch;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/createPatch = createPatch;\n\nvar /*istanbul ignore start*/_line = require('../diff/line') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/*istanbul ignore end*/function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  if (!options) {\n    options = { context: 4 };\n  }\n\n  var diff = /*istanbul ignore start*/(0, _line.diffLines) /*istanbul ignore end*/(oldStr, newStr);\n  diff.push({ value: '', lines: [] }); // Append an empty value to make cleanup easier\n\n  function contextLines(lines) {\n    return lines.map(function (entry) {\n      return ' ' + entry;\n    });\n  }\n\n  var hunks = [];\n  var oldRangeStart = 0,\n      newRangeStart = 0,\n      curRange = [],\n      oldLine = 1,\n      newLine = 1;\n  /*istanbul ignore start*/\n  var _loop = function _loop( /*istanbul ignore end*/i) {\n    var current = diff[i],\n        lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n    current.lines = lines;\n\n    if (current.added || current.removed) {\n      /*istanbul ignore start*/\n      var _curRange;\n\n      /*istanbul ignore end*/\n      // If we have previous context, start with that\n      if (!oldRangeStart) {\n        var prev = diff[i - 1];\n        oldRangeStart = oldLine;\n        newRangeStart = newLine;\n\n        if (prev) {\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n          oldRangeStart -= curRange.length;\n          newRangeStart -= curRange.length;\n        }\n      }\n\n      // Output our changes\n      /*istanbul ignore start*/(_curRange = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/lines.map(function (entry) {\n        return (current.added ? '+' : '-') + entry;\n      })));\n\n      // Track the updated file position\n      if (current.added) {\n        newLine += lines.length;\n      } else {\n        oldLine += lines.length;\n      }\n    } else {\n      // Identical context lines. Track line changes\n      if (oldRangeStart) {\n        // Close out any changes that have been output (or join overlapping)\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\n          /*istanbul ignore start*/\n          var _curRange2;\n\n          /*istanbul ignore end*/\n          // Overlapping\n          /*istanbul ignore start*/(_curRange2 = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange2 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/contextLines(lines)));\n        } else {\n          /*istanbul ignore start*/\n          var _curRange3;\n\n          /*istanbul ignore end*/\n          // end the range and output\n          var contextSize = Math.min(lines.length, options.context);\n          /*istanbul ignore start*/(_curRange3 = /*istanbul ignore end*/curRange).push. /*istanbul ignore start*/apply /*istanbul ignore end*/( /*istanbul ignore start*/_curRange3 /*istanbul ignore end*/, /*istanbul ignore start*/_toConsumableArray( /*istanbul ignore end*/contextLines(lines.slice(0, contextSize))));\n\n          var hunk = {\n            oldStart: oldRangeStart,\n            oldLines: oldLine - oldRangeStart + contextSize,\n            newStart: newRangeStart,\n            newLines: newLine - newRangeStart + contextSize,\n            lines: curRange\n          };\n          if (i >= diff.length - 2 && lines.length <= options.context) {\n            // EOF is inside this hunk\n            var oldEOFNewline = /\\n$/.test(oldStr);\n            var newEOFNewline = /\\n$/.test(newStr);\n            if (lines.length == 0 && !oldEOFNewline) {\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n            } else if (!oldEOFNewline || !newEOFNewline) {\n              curRange.push('\\\\ No newline at end of file');\n            }\n          }\n          hunks.push(hunk);\n\n          oldRangeStart = 0;\n          newRangeStart = 0;\n          curRange = [];\n        }\n      }\n      oldLine += lines.length;\n      newLine += lines.length;\n    }\n  };\n\n  for (var i = 0; i < diff.length; i++) {\n    /*istanbul ignore start*/\n    _loop( /*istanbul ignore end*/i);\n  }\n\n  return {\n    oldFileName: oldFileName, newFileName: newFileName,\n    oldHeader: oldHeader, newHeader: newHeader,\n    hunks: hunks\n  };\n}\n\nfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);\n\n  var ret = [];\n  if (oldFileName == newFileName) {\n    ret.push('Index: ' + oldFileName);\n  }\n  ret.push('===================================================================');\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n  for (var i = 0; i < diff.hunks.length; i++) {\n    var hunk = diff.hunks[i];\n    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\n    ret.push.apply(ret, hunk.lines);\n  }\n\n  return ret.join('\\n') + '\\n';\n}\n\nfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n}\n//# sourceMappingURL=data:application/json;base64,\n","/*istanbul ignore start*/\"use strict\";\n\nexports.__esModule = true;\nexports. /*istanbul ignore end*/convertChangesToDMP = convertChangesToDMP;\n// See: http://code.google.com/p/google-diff-match-patch/wiki/API\nfunction convertChangesToDMP(changes) {\n  var ret = [],\n      change = /*istanbul ignore start*/void 0 /*istanbul ignore end*/,\n      operation = /*istanbul ignore start*/void 0 /*istanbul ignore end*/;\n  for (var i = 0; i < changes.length; i++) {\n    change = changes[i];\n    if (change.added) {\n      operation = 1;\n    } else if (change.removed) {\n      operation = -1;\n    } else {\n      operation = 0;\n    }\n\n    ret.push([operation, change.value]);\n  }\n  return ret;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb252ZXJ0L2RtcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Z0NBQ2dCOztBQUFULFNBQVMsbUJBQVQsQ0FBNkIsT0FBN0IsRUFBc0M7QUFDM0MsTUFBSSxNQUFNLEVBQU47TUFDQSxnRUFESjtNQUVJLG1FQUZKLENBRDJDO0FBSTNDLE9BQUssSUFBSSxJQUFJLENBQUosRUFBTyxJQUFJLFFBQVEsTUFBUixFQUFnQixHQUFwQyxFQUF5QztBQUN2QyxhQUFTLFFBQVEsQ0FBUixDQUFULENBRHVDO0FBRXZDLFFBQUksT0FBTyxLQUFQLEVBQWM7QUFDaEIsa0JBQVksQ0FBWixDQURnQjtLQUFsQixNQUVPLElBQUksT0FBTyxPQUFQLEVBQWdCO0FBQ3pCLGtCQUFZLENBQUMsQ0FBRCxDQURhO0tBQXBCLE1BRUE7QUFDTCxrQkFBWSxDQUFaLENBREs7S0FGQTs7QUFNUCxRQUFJLElBQUosQ0FBUyxDQUFDLFNBQUQsRUFBWSxPQUFPLEtBQVAsQ0FBckIsRUFWdUM7R0FBekM7QUFZQSxTQUFPLEdBQVAsQ0FoQjJDO0NBQXRDIiwiZmlsZSI6ImRtcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNlZTogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dvb2dsZS1kaWZmLW1hdGNoLXBhdGNoL3dpa2kvQVBJXG5leHBvcnQgZnVuY3Rpb24gY29udmVydENoYW5nZXNUb0RNUChjaGFuZ2VzKSB7XG4gIGxldCByZXQgPSBbXSxcbiAgICAgIGNoYW5nZSxcbiAgICAgIG9wZXJhdGlvbjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhbmdlID0gY2hhbmdlc1tpXTtcbiAgICBpZiAoY2hhbmdlLmFkZGVkKSB7XG4gICAgICBvcGVyYXRpb24gPSAxO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgIG9wZXJhdGlvbiA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVyYXRpb24gPSAwO1xuICAgIH1cblxuICAgIHJldC5wdXNoKFtvcGVyYXRpb24sIGNoYW5nZS52YWx1ZV0pO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iXX0=\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports. /*istanbul ignore end*/convertChangesToXML = convertChangesToXML;\nfunction convertChangesToXML(changes) {\n  var ret = [];\n  for (var i = 0; i < changes.length; i++) {\n    var change = changes[i];\n    if (change.added) {\n      ret.push('<ins>');\n    } else if (change.removed) {\n      ret.push('<del>');\n    }\n\n    ret.push(escapeHTML(change.value));\n\n    if (change.added) {\n      ret.push('</ins>');\n    } else if (change.removed) {\n      ret.push('</del>');\n    }\n  }\n  return ret.join('');\n}\n\nfunction escapeHTML(s) {\n  var n = s;\n  n = n.replace(/&/g, '&amp;');\n  n = n.replace(/</g, '&lt;');\n  n = n.replace(/>/g, '&gt;');\n  n = n.replace(/\"/g, '&quot;');\n\n  return n;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb252ZXJ0L3htbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Z0NBQWdCO0FBQVQsU0FBUyxtQkFBVCxDQUE2QixPQUE3QixFQUFzQztBQUMzQyxNQUFJLE1BQU0sRUFBTixDQUR1QztBQUUzQyxPQUFLLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxRQUFRLE1BQVIsRUFBZ0IsR0FBcEMsRUFBeUM7QUFDdkMsUUFBSSxTQUFTLFFBQVEsQ0FBUixDQUFULENBRG1DO0FBRXZDLFFBQUksT0FBTyxLQUFQLEVBQWM7QUFDaEIsVUFBSSxJQUFKLENBQVMsT0FBVCxFQURnQjtLQUFsQixNQUVPLElBQUksT0FBTyxPQUFQLEVBQWdCO0FBQ3pCLFVBQUksSUFBSixDQUFTLE9BQVQsRUFEeUI7S0FBcEI7O0FBSVAsUUFBSSxJQUFKLENBQVMsV0FBVyxPQUFPLEtBQVAsQ0FBcEIsRUFSdUM7O0FBVXZDLFFBQUksT0FBTyxLQUFQLEVBQWM7QUFDaEIsVUFBSSxJQUFKLENBQVMsUUFBVCxFQURnQjtLQUFsQixNQUVPLElBQUksT0FBTyxPQUFQLEVBQWdCO0FBQ3pCLFVBQUksSUFBSixDQUFTLFFBQVQsRUFEeUI7S0FBcEI7R0FaVDtBQWdCQSxTQUFPLElBQUksSUFBSixDQUFTLEVBQVQsQ0FBUCxDQWxCMkM7Q0FBdEM7O0FBcUJQLFNBQVMsVUFBVCxDQUFvQixDQUFwQixFQUF1QjtBQUNyQixNQUFJLElBQUksQ0FBSixDQURpQjtBQUVyQixNQUFJLEVBQUUsT0FBRixDQUFVLElBQVYsRUFBZ0IsT0FBaEIsQ0FBSixDQUZxQjtBQUdyQixNQUFJLEVBQUUsT0FBRixDQUFVLElBQVYsRUFBZ0IsTUFBaEIsQ0FBSixDQUhxQjtBQUlyQixNQUFJLEVBQUUsT0FBRixDQUFVLElBQVYsRUFBZ0IsTUFBaEIsQ0FBSixDQUpxQjtBQUtyQixNQUFJLEVBQUUsT0FBRixDQUFVLElBQVYsRUFBZ0IsUUFBaEIsQ0FBSixDQUxxQjs7QUFPckIsU0FBTyxDQUFQLENBUHFCO0NBQXZCIiwiZmlsZSI6InhtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0Q2hhbmdlc1RvWE1MKGNoYW5nZXMpIHtcbiAgbGV0IHJldCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY2hhbmdlID0gY2hhbmdlc1tpXTtcbiAgICBpZiAoY2hhbmdlLmFkZGVkKSB7XG4gICAgICByZXQucHVzaCgnPGlucz4nKTtcbiAgICB9IGVsc2UgaWYgKGNoYW5nZS5yZW1vdmVkKSB7XG4gICAgICByZXQucHVzaCgnPGRlbD4nKTtcbiAgICB9XG5cbiAgICByZXQucHVzaChlc2NhcGVIVE1MKGNoYW5nZS52YWx1ZSkpO1xuXG4gICAgaWYgKGNoYW5nZS5hZGRlZCkge1xuICAgICAgcmV0LnB1c2goJzwvaW5zPicpO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgIHJldC5wdXNoKCc8L2RlbD4nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldC5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlSFRNTChzKSB7XG4gIGxldCBuID0gcztcbiAgbiA9IG4ucmVwbGFjZSgvJi9nLCAnJmFtcDsnKTtcbiAgbiA9IG4ucmVwbGFjZSgvPC9nLCAnJmx0OycpO1xuICBuID0gbi5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG4gIG4gPSBuLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcblxuICByZXR1cm4gbjtcbn1cbiJdfQ==\n","/*istanbul ignore start*/'use strict';\n\nexports.__esModule = true;\nexports.canonicalize = exports.convertChangesToXML = exports.convertChangesToDMP = exports.parsePatch = exports.applyPatches = exports.applyPatch = exports.createPatch = exports.createTwoFilesPatch = exports.structuredPatch = exports.diffJson = exports.diffCss = exports.diffSentences = exports.diffTrimmedLines = exports.diffLines = exports.diffWordsWithSpace = exports.diffWords = exports.diffChars = exports.Diff = undefined;\n/*istanbul ignore end*/\nvar /*istanbul ignore start*/_base = require('./diff/base') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nvar _base2 = _interopRequireDefault(_base);\n\n/*istanbul ignore end*/\nvar /*istanbul ignore start*/_character = require('./diff/character') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_word = require('./diff/word') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_line = require('./diff/line') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_sentence = require('./diff/sentence') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_css = require('./diff/css') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_json = require('./diff/json') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_apply = require('./patch/apply') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_parse = require('./patch/parse') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_create = require('./patch/create') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_dmp = require('./convert/dmp') /*istanbul ignore end*/;\n\nvar /*istanbul ignore start*/_xml = require('./convert/xml') /*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* See LICENSE file for terms of use */\n\n/*\n * Text diff implementation.\n *\n * This library supports the following APIS:\n * JsDiff.diffChars: Character by character diff\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n * JsDiff.diffLines: Line based diff\n *\n * JsDiff.diffCss: Diff targeted at CSS content\n *\n * These methods are based on the implementation proposed in\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n */\nexports. /*istanbul ignore end*/Diff = _base2.default;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffChars = _character.diffChars;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWords = _word.diffWords;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffWordsWithSpace = _word.diffWordsWithSpace;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffLines = _line.diffLines;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffTrimmedLines = _line.diffTrimmedLines;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffSentences = _sentence.diffSentences;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffCss = _css.diffCss;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/diffJson = _json.diffJson;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/structuredPatch = _create.structuredPatch;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/createTwoFilesPatch = _create.createTwoFilesPatch;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/createPatch = _create.createPatch;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatch = _apply.applyPatch;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/applyPatches = _apply.applyPatches;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/parsePatch = _parse.parsePatch;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/convertChangesToDMP = _dmp.convertChangesToDMP;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/convertChangesToXML = _xml.convertChangesToXML;\n/*istanbul ignore start*/exports. /*istanbul ignore end*/canonicalize = _json.canonicalize;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQWdCQTs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQ0FHRTt5REFFQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFFQTt5REFDQTt5REFFQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQTt5REFDQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFNlZSBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zIG9mIHVzZSAqL1xuXG4vKlxuICogVGV4dCBkaWZmIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIEFQSVM6XG4gKiBKc0RpZmYuZGlmZkNoYXJzOiBDaGFyYWN0ZXIgYnkgY2hhcmFjdGVyIGRpZmZcbiAqIEpzRGlmZi5kaWZmV29yZHM6IFdvcmQgKGFzIGRlZmluZWQgYnkgXFxiIHJlZ2V4KSBkaWZmIHdoaWNoIGlnbm9yZXMgd2hpdGVzcGFjZVxuICogSnNEaWZmLmRpZmZMaW5lczogTGluZSBiYXNlZCBkaWZmXG4gKlxuICogSnNEaWZmLmRpZmZDc3M6IERpZmYgdGFyZ2V0ZWQgYXQgQ1NTIGNvbnRlbnRcbiAqXG4gKiBUaGVzZSBtZXRob2RzIGFyZSBiYXNlZCBvbiB0aGUgaW1wbGVtZW50YXRpb24gcHJvcG9zZWQgaW5cbiAqIFwiQW4gTyhORCkgRGlmZmVyZW5jZSBBbGdvcml0aG0gYW5kIGl0cyBWYXJpYXRpb25zXCIgKE15ZXJzLCAxOTg2KS5cbiAqIGh0dHA6Ly9jaXRlc2VlcnguaXN0LnBzdS5lZHUvdmlld2RvYy9zdW1tYXJ5P2RvaT0xMC4xLjEuNC42OTI3XG4gKi9cbmltcG9ydCBEaWZmIGZyb20gJy4vZGlmZi9iYXNlJztcbmltcG9ydCB7ZGlmZkNoYXJzfSBmcm9tICcuL2RpZmYvY2hhcmFjdGVyJztcbmltcG9ydCB7ZGlmZldvcmRzLCBkaWZmV29yZHNXaXRoU3BhY2V9IGZyb20gJy4vZGlmZi93b3JkJztcbmltcG9ydCB7ZGlmZkxpbmVzLCBkaWZmVHJpbW1lZExpbmVzfSBmcm9tICcuL2RpZmYvbGluZSc7XG5pbXBvcnQge2RpZmZTZW50ZW5jZXN9IGZyb20gJy4vZGlmZi9zZW50ZW5jZSc7XG5cbmltcG9ydCB7ZGlmZkNzc30gZnJvbSAnLi9kaWZmL2Nzcyc7XG5pbXBvcnQge2RpZmZKc29uLCBjYW5vbmljYWxpemV9IGZyb20gJy4vZGlmZi9qc29uJztcblxuaW1wb3J0IHthcHBseVBhdGNoLCBhcHBseVBhdGNoZXN9IGZyb20gJy4vcGF0Y2gvYXBwbHknO1xuaW1wb3J0IHtwYXJzZVBhdGNofSBmcm9tICcuL3BhdGNoL3BhcnNlJztcbmltcG9ydCB7c3RydWN0dXJlZFBhdGNoLCBjcmVhdGVUd29GaWxlc1BhdGNoLCBjcmVhdGVQYXRjaH0gZnJvbSAnLi9wYXRjaC9jcmVhdGUnO1xuXG5pbXBvcnQge2NvbnZlcnRDaGFuZ2VzVG9ETVB9IGZyb20gJy4vY29udmVydC9kbXAnO1xuaW1wb3J0IHtjb252ZXJ0Q2hhbmdlc1RvWE1MfSBmcm9tICcuL2NvbnZlcnQveG1sJztcblxuZXhwb3J0IHtcbiAgRGlmZixcblxuICBkaWZmQ2hhcnMsXG4gIGRpZmZXb3JkcyxcbiAgZGlmZldvcmRzV2l0aFNwYWNlLFxuICBkaWZmTGluZXMsXG4gIGRpZmZUcmltbWVkTGluZXMsXG4gIGRpZmZTZW50ZW5jZXMsXG5cbiAgZGlmZkNzcyxcbiAgZGlmZkpzb24sXG5cbiAgc3RydWN0dXJlZFBhdGNoLFxuICBjcmVhdGVUd29GaWxlc1BhdGNoLFxuICBjcmVhdGVQYXRjaCxcbiAgYXBwbHlQYXRjaCxcbiAgYXBwbHlQYXRjaGVzLFxuICBwYXJzZVBhdGNoLFxuICBjb252ZXJ0Q2hhbmdlc1RvRE1QLFxuICBjb252ZXJ0Q2hhbmdlc1RvWE1MLFxuICBjYW5vbmljYWxpemVcbn07XG4iXX0=\n","// objects and functions for formatting diffs with partial context.  see the 'makeHunks()' documentation, below\n// for details.\n\n'use strict'\n\nfunction calcLen (linechanges, ab) {\n    let len = 0\n    for (let ci = 0; ci < linechanges.length; ci++) {\n        switch (linechanges[ci].type) {\n            case REMOVED:\n                len += ab[0]\n                break\n            case ADDED:\n                len += ab[1]\n                break\n            case UNMODIFIED:\n                len++\n                break\n            default:\n                throw Error('unknown change type: ' + linechanges[ci].type)\n        }\n    }\n    return len\n}\n\nfunction Hunk (aoff, boff, changes) {\n    this.changes = changes\n    this.aoff = aoff\n    this.boff = boff\n    this._alen = -1\n    this._blen = -1\n}\n\nObject.defineProperty (Hunk.prototype, 'alen', {\n    get: function () { return this._alen === -1 ? (this._alen = calcLen(this.changes, [1,0])) : this._alen }\n})\n\nObject.defineProperty (Hunk.prototype, 'blen', {\n    get: function () { return this._blen === -1 ? (this._blen = calcLen(this.changes, [0,1])) : this._blen }\n})\n\nHunk.prototype.unified = function () {\n    let ret = [this.unifiedHeader()]\n    this.changes.forEach(function(c) {\n        ret.push(c.unified())\n    })\n    // console.log(\"expect:\\n'\" + ret.join(\"'\\n'\") + \"'\")   // useful for creating test output\n    return ret.join('\\n')\n}\n\nHunk.prototype.unifiedHeader = function () {\n    let alen = this.alen === 1 ? '' : ',' + this.alen\n    let blen = this.blen === 1 ? '' : ',' + this.blen\n    // empty hunks show zeroith line (prior).  hunks with lines show first line number\n    let afudg = this.alen === 0 ? 0 : 1\n    let bfudg = this.blen === 0 ? 0 : 1\n    return '@@ -' + (this.aoff+afudg) + alen + ' +' + (this.boff+bfudg) + blen + ' @@'\n}\n\nHunk.prototype.shorthand = function () {\n    return this.changes.reduce(function(s,c){ return s + c.type }, '')\n}\n\nHunk.prototype.toString = function () {\n    return \"{\" + this.shorthand() + \"} \" + this.unifiedHeader()\n}\n\nconst ADDED = '+'\nconst REMOVED = '-'\nconst UNMODIFIED = 's'\n\nfunction type2unified (type) { return type === 's' ? ' ' : type }\n\n// LineChange objects represent a single line of change.  Converting diff.diffLine() result array into LineChange\n// object array:\n//\n//    1.  simplifies logic that needs work with lines\n//    2.  separates this extension module from specific dependency on the diff library\nfunction LineChange (type, text) {\n    this.type = type   // ADDED, REMOVED, UNMODIFIED\n    this.text = text\n}\nLineChange.prototype.unified = function () {\n    return type2unified(this.type) + this.text\n}\nLineChange.prototype.toString = function () {  return this.unified() }\n\n// convert a single change from diff.diffLines() into a single line string\n// (handy for debugging)\nfunction change2string (c, maxwidth) {\n    maxwidth = maxwidth || 60\n    let ret = c.count + ': ' + type2unified(c.type)\n    let lim = Math.min(maxwidth - ret.length, c.value.length-1) // remove last newline\n    let txt = c.value.substring(0,lim).replace(/\\n/g, ',') + (c.value.length > (lim+1) ? '...' : '')\n    return  ret + txt\n}\n\n// Convert a change as returned from diff.diffLines() into an LineChange objects with offset information.\n//\n//     change    - object returned from diff.diffLines() containing one or more lines of change info\n//     select    - (int)\n//                  positive, return up to this many lines from the start of change.\n//                  negative, return up to this many lines from the end of the change.\n//                  zero, return empty array\n//                  undefined, return all lines\n//\nfunction lineChanges (change, select) {\n    // debug:\n    // console.log(change2str(change) + (select === undefined ? '' : '  (select:' + select + ')'))\n    if (select === 0) {\n        return []\n    }\n    let lines = []\n    let v = change.value\n    if (select === undefined) {\n        lines = v.split('\\n')\n        if (!lines[lines.length-1]) { lines.pop() }  // remove terminating new line\n    } else if(select > 0) {\n        let i = nthIndexOf(v, '\\n', 0, select, false)\n        lines = v.substring(0,i).split('\\n')\n    } else {\n        let len = v[v.length-1] === '\\n' ? v.length-1 : v.length\n        let i = nthIndexOf(v, '\\n', len-1, -select, true)\n        lines = v.substring(i+1, len).split('\\n')\n    }\n    return lines.map(function (line){ return new LineChange(change.type, line)})\n}\n\n// convert a list of changes into a shorthand notation like 'ss--+++ss-+ss'\nfunction changes2shorthand (changes) {\n    return '{' + changes.reduce(function (s,c) { for(let i=0; i< c.count; i++) s += c.type; return s }, '') + '}'\n}\n\n// concat-in-place, a -> b and return b\nfunction concatTo (a, b) {\n    Array.prototype.push.apply(b, a)\n    return b\n}\n\n// Make Hunk objects from changes as returned from a call to unidiff.lineChanges().  Hunks are collections\n// of continuous line changes, therefore every hunk after the first marks a gap\n// where unmodified context lines are skipped.\n//\n//      let 's' represent an unmodifed line 'same'\n//          '-' represent a removed line\n//          '+' represent an added line\n//\n//      then hunks with a context of 2 could might like this:\n//\n//             hunk                hunk         hunk\n//           ___|____            ___|__        ___|___\n//          |        |          |       |     |       |\n//       sssss----++ssssssssssssss-ss--sssssssss+++++ssssssssss\n//\n//      or this:\n//\n//             hunk              hunk             hunk\n//           ___|____       ______|_______     ____|___\n//          |        |     |              |   |        |\n//          ++++++++sssssssss+++ssss---++sssssss--++++++\n//\n//      notice that with a context of 2, series of 4 or fewer unmodified lines are included in the same hunk.\n//\n// basic algo with context of 3, for illustration:\n//\n//     0. loop (over each block change)\n//        modified block:\n//           add all modified lines, continue loop 0\n//\n//        unmodified block:\n//           first hunk: collect tail portion, continue\n//           subsequent hunks: get head portion, and tail (iff there are more changes)\n//              head + tail <= 6 ?\n//                 add all to current hunk, continue loop 0\n//              head + tail > 6 ?\n//                 finish hunk with head portion\n//                 start new hunk with tail portion (iff there are more changes), continue loop 0\n//\nfunction makeHunks (changes, precontext, postcontext) {\n\n    //console.log('--------\\nmakeHunks(' + [changes2shorthand(changes), precontext, postcontext].join(', ') + ')')\n    let ret = []        // completed hunks to return\n    let lchanges = []   // accumulated line changes (continous/no-gap) to put into next hunk\n    let lskipped = 0    // skipped context to take into account in next hunk line numbers\n    function finishHunk () {\n        if (lchanges.length) {\n            let aoff = lskipped, boff = lskipped\n            if (ret.length) {\n                let prev = ret[ret.length-1]\n                aoff += prev.aoff + prev.alen\n                boff += prev.boff + prev.blen\n            }\n            // add hunk and reset state\n            ret.push(new Hunk(aoff, boff, lchanges))\n            lchanges = []\n            lskipped = 0\n        }\n        // else keep state (lskipped) and continue\n    }\n\n    for (let ci=0; ci < changes.length; ci++) {\n        let change = changes[ci]\n        if (change.type === UNMODIFIED) {\n            // add context\n            let ctx_after  = ci > 0 ? postcontext : 0              // context lines following previous change\n            let ctx_before = ci < changes.length - 1 ? precontext : 0  // context lines preceding next change (iff there are more changes)\n            let skip = Math.max(change.count - (ctx_after + ctx_before), 0)\n            if (skip > 0) {\n                concatTo(lineChanges(change, ctx_after), lchanges)          // finish up previous hunk\n                finishHunk()\n                concatTo(lineChanges(change, -ctx_before), lchanges)\n                lskipped = skip                                             // remember skipped for next hunk\n            } else {\n                concatTo(lineChanges(change), lchanges)                     // add all context\n            }\n        } else {\n            concatTo(lineChanges(change), lchanges)                         // add all modifications\n        }\n    }\n    finishHunk()\n    //console.log(ret.map(function(h){ return h.toString() }).join('\\n'))\n    return ret\n}\n\n// no safty checks. caller knows that there are at least n occurances of v in s to be found.\n// reverse will search from high to low using lastIndexOf().\nfunction nthIndexOf (s, v, from, n, reverse) {\n    let d = reverse ? -1 : 1\n    from -= d\n    for (let c=0; c<n; c++) {\n        from = reverse ? s.lastIndexOf(v, from + d) : s.indexOf(v, from + d)\n    }\n    return from\n}\n\n// for testing and debugging\nexports.hunk = function (aoff, boff, lchanges) { return new Hunk(aoff, boff, lchanges) }\nexports.linechange = function (type, text) { return new LineChange(type, text)}\nexports.lineChanges = lineChanges\nexports.change2string = change2string\nexports.changes2shorthand = changes2shorthand\nexports.nthIndexOf = nthIndexOf\n\n// main API\nexports.makeHunks = makeHunks\nexports.ADDED = ADDED\nexports.REMOVED = REMOVED\nexports.UNMODIFIED = UNMODIFIED\n\n\n\n","'use strict'\n\nlet jdiff = require('diff')\nlet hunk = require('./hunk')\n\n\n// return a change type code for the change (returned from diff.diffLines())\nfunction changeType (change) {\n    if (change.added) {\n        return hunk.ADDED\n    } else if (change.removed) {\n        return hunk.REMOVED\n    } else {\n        return hunk.UNMODIFIED\n    }\n}\n\n// Given changes from a call to diff.diffLines(), assign each change a type code and\n// check that no two of same type occur in a row\nfunction checkAndAssignTypes (changes) {\n    if (changes.length === 0) { return [] }\n\n    changes[0].type = changeType(changes[0])\n    return changes.reduce(function (a, b, i) {\n        b.type = changeType(b)\n        if (a.type === b.type) {\n            throw Error('repeating change types are not handled: ' + a.type  + ' (at ' + (i-1) + ' and ' + i + ')')\n        }\n        return b\n    })\n}\n\n\n// convert an array of results from diff.diffLines() into text in unified diff format.\n// return empty string if there are no changes.\nfunction formatLines (changes, opt) {\n    checkAndAssignTypes(changes)\n    opt = opt || {}\n    opt.aname = opt.aname || 'a'\n    opt.bname = opt.bname || 'b'\n    let context = (opt.context || opt.context === 0) ? opt.context : 0\n    opt.pre_context = (opt.pre_context || opt.pre_context === 0) ? opt.pre_context : context\n    opt.post_context = (opt.post_context || opt.post_context === 0) ? opt.post_context : context\n\n    let hunks = hunk.makeHunks(changes, opt.pre_context, opt.post_context)\n    if (hunks.length) {\n        let ret = []\n        ret.push('--- ' + opt.aname)\n        ret.push('+++ ' + opt.bname)\n        hunks.forEach(function (h) {\n            ret.push(h.unified())\n        })\n        return ret.join('\\n')\n    } else {\n        return ''\n    }\n}\n\n// same as jsdiff.diffLines, but returns empty array when there are no changes (instead of an array with a single\n// unmodified change object)\nfunction diffLines (a, b, cb) {\n    a = Array.isArray(a) ? a.join('\\n') + '\\n' : a\n    b = Array.isArray(b) ? b.join('\\n') + '\\n' : b\n    let ret = jdiff.diffLines(a, b, cb)\n    if (ret.length === 1 && !ret[0].added && !ret[0].removed) {\n        return []\n    } else {\n        return ret\n    }\n}\n\nfunction diffAsText (a, b, opt) {\n    return formatLines(diffLines(a, b), opt)\n}\n\n// handy assertion function that asserts that two arrays or two multi-line strings are the same and reports\n// differences to console.log in unified format if there are differences.\n//\n//     actual - array or multi-line string to compare\n//     expected - array or multi-line string to compare\n//     label - label to clarify output if there are differences\n//     okFn - function like tape.ok that takes two arguments:\n//         expression - true if OK, false if failed test\n//         msg - a one-line message that prints upon failure\n//     logFn - function to call with diff output when there are differences (defaults to console.log)\n//\nfunction assertEqual (actual, expected, okFn, label, logFn) {\n    logFn = logFn || console.log\n    okFn = okFn.ok || okFn\n    let diff = diffAsText(actual, expected, {context: 3, aname: label + \" (actual)\", bname: label + ' (expected)'})\n    okFn(!diff, label)\n    if (diff) {\n        diff.split('\\n').forEach(function (line) {\n            logFn('  ' + line)\n        })\n    }\n}\n\nexports.assertEqual = assertEqual\nexports.diffAsText = diffAsText\nexports.formatLines = formatLines\nexports.diffLines = diffLines\n\nObject.keys(jdiff).forEach(function (k) {\n    if (!exports[k]) {\n        exports[k] = jdiff[k]\n    }\n})\n"],"names":["Diff","buildValues","diff","components","newString","oldString","useLongestToken","componentPos","componentLen","length","newPos","oldPos","component","removed","value","slice","count","join","added","tmp","map","i","oldValue","lastComponent","equals","pop","exports","prototype","options","arguments","undefined","callback","this","self","done","setTimeout","castInput","removeEmpty","tokenize","newLen","oldLen","editLength","maxEditLength","bestPath","extractCommon","execEditLength","diagonalPath","basePath","addPath","removePath","_oldPos","canAdd","canRemove","path","pushComponent","exec","ret","last","push","commonCount","left","right","array","split","oldStr","newStr","characterDiff","obj","_base2","_base","__esModule","default","defaults","name","hasOwnProperty","_params","generateOptions","ignoreWhitespace","wordDiff","extendedWordChars","reWhitespace","test","tokens","splice","lineDiff","retLines","linesAndNewlines","line","newlineIsToken","trim","sentenceDiff","cssDiff","_typeof","Symbol","iterator","constructor","oldObj","newObj","jsonDiff","canonicalize","objectPrototypeToString","Object","toString","stack","replacementStack","canonicalizedObj","call","Array","toJSON","sortedKeys","key","sort","_line","JSON","stringify","replace","uniDiff","diffstr","list","parseIndex","index","header","parseFileHeader","hunks","parseHunk","strict","Error","fileHeader","keyPrefix","chunkHeaderIndex","chunkHeaderLine","chunkHeader","hunk","oldStart","oldLines","newStart","newLines","lines","addCount","removeCount","operation","start","minLine","maxLine","wantForward","backwardExhausted","forwardExhausted","localOffset","applyPatch","_parse","parsePatch","currentIndex","processIndex","complete","loadFile","err","data","updatedContent","patched","_distanceIterator2","_distanceIterator","source","isArray","compareLine","lineNumber","patchContent","errorCount","fuzzFactor","offset","removeEOFNL","addEOFNL","hunkFits","toPos","j","content","substr","_i","_hunk","_toPos","previousOperation","_toConsumableArray","arr","arr2","from","structuredPatch","oldFileName","newFileName","oldHeader","newHeader","context","diffLines","contextLines","entry","oldRangeStart","newRangeStart","curRange","oldLine","newLine","_loop","current","_curRange","prev","apply","_curRange2","_curRange3","contextSize","Math","min","oldEOFNewline","newEOFNewline","createTwoFilesPatch","fileName","changes","change","escapeHTML","s","n","_character","diffChars","_word","diffWords","diffWordsWithSpace","diffTrimmedLines","_sentence","diffSentences","_css","diffCss","_json","diffJson","_create","createPatch","_apply","applyPatches","_dmp","convertChangesToDMP","_xml","convertChangesToXML","calcLen","linechanges","ab","len","ci","type","REMOVED","ADDED","UNMODIFIED","Hunk","aoff","boff","_alen","_blen","defineProperty","get","unified","unifiedHeader","forEach","c","alen","blen","afudg","bfudg","shorthand","reduce","type2unified","LineChange","text","lineChanges","select","v","nthIndexOf","substring","concatTo","a","b","reverse","d","lastIndexOf","indexOf","lchanges","maxwidth","lim","precontext","postcontext","lskipped","finishHunk","ctx_after","ctx_before","skip","max","changeType","formatLines","opt","checkAndAssignTypes","aname","bname","pre_context","post_context","makeHunks","h","cb","jdiff","diffAsText","actual","expected","okFn","label","logFn","console","log","ok","keys","k"],"mappings":"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"}